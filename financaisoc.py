# -*- coding: utf-8 -*-
"""financaisoc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xqjt7zWErwAKm0hIyW99213fi57ca--1
"""

import yfinance as yf
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
import pandas as pd

# Define the stock symbol and the time frame
stock_symbol = 'MSFT'
start_date = '2019-01-01'
end_date = '2024-01-01'

# Fetch the data
data = yf.download(stock_symbol, start=start_date, end=end_date)

# Use the 'Close' prices for ARIMA model
data = data[['Close']].dropna()

# Display the first few rows of the Series
print(data.head())

# Split the data into training and testing sets
train_size = int(len(data) * 0.8)
train_data = data['Close'][:train_size]
test_data = data['Close'][train_size:]

# Verify the sizes of the training and testing sets
print(f"Training data size: {len(train_data)}")
print(f"Testing data size: {len(test_data)}")

# Fit the ARIMA model (p, d, q) parameters can be adjusted based on AIC/BIC or PACF/ACF analysis
model = ARIMA(train_data, order=(2, 0, 1))  # Example order, adjust as needed
model_fit = model.fit()

# Check the summary of the model fit
print(model_fit.summary())

# Forecast for the test period
predictions = model_fit.forecast(steps=len(test_data))

# Convert predictions to a Series with the same index as test_data
predictions_series = pd.Series(predictions, index=test_data.index)

# Verify the predictions Series
# predictions_series=predictions_series.fillna(5)
print(predictions_series.head())

# Plot the actual data and the predictions
plt.figure(figsize=(14, 7))
plt.plot(train_data, label='Training Data')
plt.plot(test_data, label='Actual Data', color='blue')
plt.plot(predictions_series, label='Predictions', color='red')
plt.title('ARIMA Model Predictions vs Actual Data')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

print(train_data.isna().sum())

import yfinance as yf
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Define the stock symbol and the time frame
stock_symbol = 'MSFT'
start_date = '2019-01-01'
end_date = '2024-01-01'

# Fetch the data
data = yf.download(stock_symbol, start=start_date, end=end_date)

# Use the 'Close' prices for ARIMA model
data = data['Close'].dropna()

# Plot the ACF
plt.figure(figsize=(14, 7))
plot_acf(data, lags=40)
plt.title('Auto-Correlation Function (ACF)')
plt.show()

# Plot the PACF
plt.figure(figsize=(14, 7))
plot_pacf(data, lags=40)
plt.title('Partial Auto-Correlation Function (PACF)')
plt.show()

